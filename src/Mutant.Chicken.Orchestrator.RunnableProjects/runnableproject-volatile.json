{
  "$schema": "http://json-schema.org/draft-04/schema",
  "definitions": {
    "globbingPattern": {
      "type": "string",
      "description": "A globbing pattern"
    },
    "includePatterns": {
      "type": "array",
      "description": "A set of globbing patterns that, when matched, include a file for processing",
      "items": { "$ref": "#/definitions/globbingPattern" },
      "default": [ "**/*" ]
    },
    "excludePatterns": {
      "type": "array",
      "description": "A set of globbing patterns that, when matched, exclude files from the output, these supersede any include or copyOnly patterns",
      "items": { "$ref": "#/definitions/globbingPattern" },
      "default": [ ".netnew3.json" ]
    },
    "copyOnlyPatterns": {
      "type": "array",
      "description": "A set of globbing patterns that, when matched, exclude files from processing but include them in the output, these supersede any include patterns",
      "items": { "$ref": "#/definitions/globbingPattern" },
      "default": []
    },
    "rename": {
      "type": "object",
      "description": "A set of mappings between source file names and output file names.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "sourcesSection": {
      "description": "The set of sources that need to be processed in instantiating the template.",
      "type": "array",
      "items": { "$ref": "#/definitions/sourcesEntry" },
      "minItems": 1
    },
    "sourcesEntry": {
      "description": "A mapping from a file source to a target.",
      "type": "object",
      "properties": {
        "rename": { "$ref": "#/definitions/rename" },
        "include": { "$ref": "#/definitions/includePatterns" },
        "exclude": { "$ref": "#/definitions/excludePatterns" },
        "copyOnly": { "$ref": "#/definitions/copyOnlyPatterns" },
        "source": {
          "type": "string",
          "description": "The location, relative to the .netnew.json file, that the files to process should come from."
        },
        "target": {
          "type": "string",
          "description": "The location, relative to the output directory, that the files to process should go.",
          "default": "./"
        }
      },
      "required": [ "include", "source" ]
    },
    "parameter": {
      "type": "object",
      "description": "Information about how a parameter should be handled",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description for the property"
        },
        "isName": {
          "type": "boolean",
          "description": "Whether or not this corresponds to the value of the name parameter from the broker",
          "default": false
        },
        "type": {
          "enum": [ "string", "int", "bool" ],
          "default": "string",
          "description": "The type of the parameter, not enforced, but used for display purposes."
        },
        "defaultValue": { "type": "string" },
        "requirement": {
          "enum": [
            "required",
            "suggested",
            "optional",
            "addOn",
            "implicit"
          ],
          "default": "optional",
          "description": "The requiredness of the parameter"
        },
        "isVariable": {
          "type": "boolean",
          "description": "Whether or not this property should be treated as a variable for evaluations",
          "default": false
        }
      }
    },
    "config": {
      "type": "object",
      "description": "The operations and configurations for them that will be applied during template instantiation.",
      "properties": {
        "conditionals": { "$ref": "#/definitions/conditionals" },
        "variables": { "$ref": "#/definitions/variables" },
        "replacements": { "$ref": "#/definitions/replacements" },
        "flags": { "$ref": "#/definitions/flags" },
        "include": { "$ref": "#/definitions/include" },
        "regions": { "$ref": "#/definitions/regions" }
      }
    },
    "flagsSetting": {
      "type": "object",
      "description": "Configuration for the flag's behavior.",
      "properties": {
        "on": { "type": "string" },
        "off": { "type": "string" },
        "default": { "type": "boolean" }
      },
      "required": [ "on", "off" ]
    },
    "flags": {
      "type": "object",
      "description": "Flags that can by dynamically set during processing.",
      "properties": {
        "conditionals": { "$ref": "#/definitions/flagsSetting" },
        "variables": { "$ref": "#/definitions/flagsSetting" },
        "replacements": { "$ref": "#/definitions/flagsSetting" },
        "include": { "$ref": "#/definitions/flagsSetting" },
        "regions": { "$ref": "#/definitions/flagsSetting" }
      },
      "additionalProperties": { "$ref": "#/definitions/flagsSetting" }
    },
    "include": {
      "type": "object",
      "description": "Files that can be dynamically included (but not processed, apart from changing the encoding to match the target file).",
      "properties": {
        "start": { "type": "string" },
        "end": { "type": "string" }
      },
      "required": [ "start", "end" ]
    },
    "regions": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "description": "Configuration for regions.",
            "properties": {
              "start": {
                "type": "string",
                "description": "The start token for the region."
              },
              "end": {
                "type": "string",
                "description": "The end token for the region."
              },
              "include": {
                "type": "string",
                "description": "Whether or not the region should be included"
              },
              "wholeLine": {
                "description": "Whether or not the whole line that an expression is found on should be consumed or just the portion from the starting token to the end of the expression.",
                "type": "boolean",
                "default": false
              },
              "trim": {
                "description": "Whether or not to trim whitespace following an expression, leading up to the next non-whitespace character after the expression.",
                "type": "boolean",
                "default": false
              }
            },
            "required": [ "start", "end", "include" ]
          }
        }
      }
    },
    "conditionals": {
      "type": "object",
      "description": "Configuration for conditional expressions.",
      "properties": {
        "if": {
          "type": "string",
          "description": "The \"if\" token (ex. #if in C style languages)"
        },
        "else": {
          "type": "string",
          "description": "The \"else\" token (ex. #else in C style languages)"
        },
        "elseif": {
          "type": "string",
          "description": "The \"elseif\" token (ex. #elseif in C style languages)"
        },
        "endif": {
          "type": "string",
          "description": "The \"endif\" token (ex. #endif in C style languages)"
        },
        "evaluator": {
          "description": "The expression evaluator to use, currently only C++ style expressions wrapped in parenthesis are supported (value of C++)",
          "type": "string",
          "enum": [ "C++" ]
        },
        "wholeLine": {
          "description": "Whether or not the whole line that an expression is found on should be consumed or just the portion from the starting token to the end of the expression.",
          "type": "boolean",
          "default": false
        },
        "trim": {
          "description": "Whether or not to trim whitespace following an expression, leading up to the next non-whitespace character after the expression.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [ "if", "else", "elseif", "endif", "evaluator" ]
    },
    "variables": {
      "type": "object",
      "description": "Configuration for variables used during template instantiation.",
      "properties": {
        "order": {
          "description": "The order the sources should be applied in (rightmost wins for ambiguous references)",
          "type": "array",
          "items": {
            "enum": [ "environment", "user", "executor" ]
          },
          "minItems": 0,
          "maxItems": 3,
          "uniqueItems": true
        },
        "environment": {
          "type": "string",
          "description": "The format string for environment variables.",
          "default": "{0}"
        },
        "user": {
          "type": "string",
          "description": "The format string for user-defined variables and parameters with the isVariable indication.",
          "default": "{0}"
        },
        "executor": {
          "type": "string",
          "description": "The format string for executor variables.",
          "default": "{0}"
        },
        "fallbackFormat": {
          "type": "string",
          "description": "The .NET format string to apply to all variable names.",
          "default": "{0}"
        },
        "expand": {
          "type": "boolean",
          "description": "Whether or not to expand variables found in the sources.",
          "default": true
        }
      }
    },
    "replacements": {
      "type": "object",
      "description": "Mappings between literals found in the source and the parameter whose value should be used to replace it.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "macros": {
      "type": "object",
      "description": "Dynamically generated values or evaluations that should be made available as user variables.",
      "additionalProperties": {
        "type": "object",
        "description": "The name of the user variable to create.",
        "oneOf": [
          { "$ref": "#/definitions/macroNow" },
          { "$ref": "#/definitions/macroConstant" },
          { "$ref": "#/definitions/macroEvaluation" },
          { "$ref": "#/definitions/macroGuid" }
        ],
        "required": [ "type" ]
      }
    },
    "macroNow": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [ "now" ],
          "description": "Gets the current time"
        },
        "action": {
          "type": "string",
          "description": "The format string to apply to the current time."
        },
        "utc": {
          "type": "boolean",
          "description": "Whether or not to use UTC time instead of local time.",
          "default": false
        }
      },
      "required": [ "action" ]
    },
    "macroConstant": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [ "constant" ],
          "description": "A constant value"
        },
        "action": {
          "type": "string",
          "description": "The value of the contant"
        }
      },
      "required": [ "action" ]
    },
    "macroEvaluation": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [ "evaluate" ],
          "description": "An evaluation of conditions."
        },
        "action": {
          "type": "string",
          "description": "The expression to evaluate, may refer to any variable or parameter."
        },
        "evaluator": {
          "type": "string",
          "enum": [ "C++" ],
          "default": "C++",
          "description": "The evaluator to use to evaluate the expression."
        }
      },
      "required": [ "action" ]
    },
    "macroGuid": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [ "guid" ],
          "description": "A GUID operation"
        },
        "action": {
          "type": "string",
          "enum": [ "new" ],
          "description": "The action to perform."
        },
        "format": {
          "type": "string",
          "description": "The .NET format string to apply to the resulting GUID."
        }
      }
    }
  },

  "type": "object",
  "description": "A configuration file for runnable project based templates",
  "properties": {
    "$schema": {
      "type": "string",
      "pattern": "^.*/runnableproject-volatile.json(?:#?)$"
    },
    "name": { "type": "string" },
    "shortName": { "type": "string" },
    "defaultName": {
      "type": "string",
      "description": "The default name for this template."
    },
    "description": {
      "type": "string",
      "description": "The description for this template."
    },
    "sources": { "$ref": "#/definitions/sourcesSection" },
    "parameters": {
      "type": "object",
      "description": "Parameters that can be collected and passed to the template during instantiation.",
      "additionalProperties": { "$ref": "#/definitions/parameter" }
    },
    "config": { "$ref": "#/definitions/config" },
    "special": {
      "description": "Specialized handling for files that match certain globbing patterns (keys to this object).",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "config": { "$ref": "#/definitions/config" }
        }
      }
    }
  },
  "required": [ "$schema", "name", "defaultName", "config", "description" ]
}
